"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default({
  success,
  payload,
  api,
  lang,
  failure
}) {
  var _api$config, _api$config2, _api$config2$routes, _api$config3;

  const _ref = payload,
        item = _ref.item;
  /**
   * 是不是有这个 feature tag
   * @param feature
   */

  function haveFeature(feature) {
    return item.features && item.features.includes(feature);
  } // 获取最后生成的路由


  const configRoutes = Array.isArray((_api$config = api.config) === null || _api$config === void 0 ? void 0 : _api$config.routes) && ((_api$config2 = api.config) === null || _api$config2 === void 0 ? void 0 : (_api$config2$routes = _api$config2.routes) === null || _api$config2$routes === void 0 ? void 0 : _api$config2$routes.length) > 0; // 不支持约定式路由

  if (!configRoutes) {
    failure({
      message: lang === 'zh-CN' ? '区块添加暂不支持约定式路由，请先转成配置式路由。' : 'The block adding does not support the conventional route, please convert to a configuration route.'
    });
    return;
  }

  const payloadType = payload.type === 'block' ? '区块' : '模板';
  const isBigfish = !!process.env.BIGFISH_COMPAT; // 提前判断是否有 package.json，区块添加时如果没有会报错

  if (!(0, _fs().existsSync)((0, _path().join)(api.cwd, 'package.json'))) {
    failure({
      message: lang === 'zh-CN' ? `${payloadType}添加需要在项目根目录有 package.json` : `package.json is required to add ${payloadType}`
    });
    return;
  }

  const checkConfigRules = {
    dva: {
      // 解决插件封装里开启 dva 的情况
      enable: (_api$config3 = api.config) === null || _api$config3 === void 0 ? void 0 : _api$config3.dva,
      message: {
        'zh-CN': isBigfish ? `${payloadType}依赖 dva，请开启 dva 配置。` : `${payloadType}依赖 dva，请安装 @umijs/preset-react 插件并开启 dva 。`,
        'en-US': isBigfish ? '' : 'Block depends on dva, please install @umijs/preset-react and enable dva.'
      }
    },
    i18n: {
      enable: api.config.locale,
      message: {
        'zh-CN': isBigfish ? `${payloadType}依赖 locale，请开启 locale 配置。` : `${payloadType}依赖国际化（i18n），请安装 @umijs/preset-react 插件并开启 locale 。`,
        'en-US': isBigfish ? '' : 'Block depends on i18n, please install @umijs/preset-react and enable locale.'
      }
    }
  };
  Object.keys(checkConfigRules).forEach(rule => {
    if (haveFeature(rule) && checkConfigRules[rule] && !checkConfigRules[rule].enable) {
      failure({
        message: checkConfigRules[rule].message[lang] || checkConfigRules[rule].message['zh-CN']
      });
      return false;
    }
  });
  success({
    data: true,
    success: true
  });
}