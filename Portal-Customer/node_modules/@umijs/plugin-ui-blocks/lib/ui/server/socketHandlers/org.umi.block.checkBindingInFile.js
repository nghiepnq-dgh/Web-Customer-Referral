"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _haveRootBinding() {
  const data = _interopRequireDefault(require("@umijs/block-sdk/lib/sdk/haveRootBinding"));

  _haveRootBinding = function _haveRootBinding() {
    return data;
  };

  return data;
}

function _blockSdk() {
  const data = require("@umijs/block-sdk");

  _blockSdk = function _blockSdk() {
    return data;
  };

  return data;
}

function _umi() {
  const data = require("umi");

  _umi = function _umi() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const createDebug = _umi().utils.createDebug,
      winPath = _umi().utils.winPath;

const debug = createDebug('umiui:UmiUI:block:checkBindingInFile');

var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* ({
    success,
    payload,
    api,
    failure
  }) {
    const _ref2 = payload,
          targetPath = _ref2.path,
          name = _ref2.name;
    const paths = api.paths;
    debug('absPagesPath', paths.absPagesPath);
    debug('targetPath', targetPath); // 找到具体的 js

    const absTargetPath = (0, _path().join)(paths.absPagesPath, winPath(targetPath).replace(paths.absPagesPath, ''));
    debug('absTargetPath', absTargetPath); // 有些用户路由下载路径是不在的，这里拦住他们

    if (!(0, _fs().existsSync)(absTargetPath) && // 当前路由为单文件
    !(0, _blockSdk().findJS)({
      base: absTargetPath,
      fileNameWithoutExt: ''
    })) {
      failure({
        message: ` ${absTargetPath} 目录不存在!`,
        success: false
      });
      return;
    }

    const entryPath = // Bar => Bar/index.(tsx|jsx|js|jsx)
    (0, _blockSdk().findJS)({
      base: absTargetPath,
      fileNameWithoutExt: 'index'
    }) || // Bar => Bar.(tsx|jsx|js|jsx)
    (0, _blockSdk().findJS)({
      base: absTargetPath,
      fileNameWithoutExt: ''
    });
    debug('entryPath', entryPath);

    if (!entryPath) {
      failure({
        message: `未在 ${absTargetPath} 目录下找到 index.(ts|tsx|js|jsx) !`,
        success: false
      });
      return;
    }

    const exists = yield (0, _haveRootBinding().default)((0, _fs().readFileSync)(entryPath, 'utf-8'), name);
    success({
      exists,
      success: true
    });
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;